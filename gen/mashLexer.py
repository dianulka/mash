# Generated from C:/Users/diana/PycharmProjects/mash/mash.g4 by ANTLR 4.13.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,20,146,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,1,0,1,0,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,2,1,2,1,2,1,3,1,3,1,4,1,
        4,1,5,1,5,1,6,1,6,1,7,1,7,1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,
        9,1,9,1,9,1,9,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,11,1,11,
        1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,12,1,12,1,13,4,13,97,8,13,11,
        13,12,13,98,1,14,1,14,1,14,5,14,104,8,14,10,14,12,14,107,9,14,1,
        15,1,15,1,15,5,15,112,8,15,10,15,12,15,115,9,15,1,15,1,15,1,16,4,
        16,120,8,16,11,16,12,16,121,1,17,4,17,125,8,17,11,17,12,17,126,1,
        18,1,18,5,18,131,8,18,10,18,12,18,134,9,18,1,18,1,18,1,18,1,18,1,
        19,4,19,141,8,19,11,19,12,19,142,1,19,1,19,2,113,132,0,20,1,1,3,
        2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,
        29,15,31,16,33,17,35,18,37,19,39,20,1,0,3,1,0,48,57,3,0,65,90,95,
        95,97,122,3,0,9,10,13,13,32,32,154,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,
        0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,
        0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,
        0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,
        0,0,0,37,1,0,0,0,0,39,1,0,0,0,1,41,1,0,0,0,3,46,1,0,0,0,5,50,1,0,
        0,0,7,53,1,0,0,0,9,55,1,0,0,0,11,57,1,0,0,0,13,59,1,0,0,0,15,61,
        1,0,0,0,17,63,1,0,0,0,19,65,1,0,0,0,21,76,1,0,0,0,23,84,1,0,0,0,
        25,93,1,0,0,0,27,96,1,0,0,0,29,100,1,0,0,0,31,108,1,0,0,0,33,119,
        1,0,0,0,35,124,1,0,0,0,37,128,1,0,0,0,39,140,1,0,0,0,41,42,5,101,
        0,0,42,43,5,99,0,0,43,44,5,104,0,0,44,45,5,111,0,0,45,2,1,0,0,0,
        46,47,5,36,0,0,47,48,5,40,0,0,48,49,5,40,0,0,49,4,1,0,0,0,50,51,
        5,41,0,0,51,52,5,41,0,0,52,6,1,0,0,0,53,54,5,43,0,0,54,8,1,0,0,0,
        55,56,5,45,0,0,56,10,1,0,0,0,57,58,5,42,0,0,58,12,1,0,0,0,59,60,
        5,47,0,0,60,14,1,0,0,0,61,62,5,40,0,0,62,16,1,0,0,0,63,64,5,41,0,
        0,64,18,1,0,0,0,65,66,5,115,0,0,66,67,5,116,0,0,67,68,5,114,0,0,
        68,69,5,105,0,0,69,70,5,110,0,0,70,71,5,103,0,0,71,72,5,95,0,0,72,
        73,5,118,0,0,73,74,5,97,0,0,74,75,5,114,0,0,75,20,1,0,0,0,76,77,
        5,105,0,0,77,78,5,110,0,0,78,79,5,116,0,0,79,80,5,95,0,0,80,81,5,
        118,0,0,81,82,5,97,0,0,82,83,5,114,0,0,83,22,1,0,0,0,84,85,5,98,
        0,0,85,86,5,111,0,0,86,87,5,111,0,0,87,88,5,108,0,0,88,89,5,95,0,
        0,89,90,5,118,0,0,90,91,5,97,0,0,91,92,5,114,0,0,92,24,1,0,0,0,93,
        94,5,61,0,0,94,26,1,0,0,0,95,97,3,33,16,0,96,95,1,0,0,0,97,98,1,
        0,0,0,98,96,1,0,0,0,98,99,1,0,0,0,99,28,1,0,0,0,100,105,3,35,17,
        0,101,104,3,35,17,0,102,104,3,33,16,0,103,101,1,0,0,0,103,102,1,
        0,0,0,104,107,1,0,0,0,105,103,1,0,0,0,105,106,1,0,0,0,106,30,1,0,
        0,0,107,105,1,0,0,0,108,113,5,34,0,0,109,112,3,35,17,0,110,112,5,
        32,0,0,111,109,1,0,0,0,111,110,1,0,0,0,112,115,1,0,0,0,113,114,1,
        0,0,0,113,111,1,0,0,0,114,116,1,0,0,0,115,113,1,0,0,0,116,117,5,
        34,0,0,117,32,1,0,0,0,118,120,7,0,0,0,119,118,1,0,0,0,120,121,1,
        0,0,0,121,119,1,0,0,0,121,122,1,0,0,0,122,34,1,0,0,0,123,125,7,1,
        0,0,124,123,1,0,0,0,125,126,1,0,0,0,126,124,1,0,0,0,126,127,1,0,
        0,0,127,36,1,0,0,0,128,132,5,35,0,0,129,131,9,0,0,0,130,129,1,0,
        0,0,131,134,1,0,0,0,132,133,1,0,0,0,132,130,1,0,0,0,133,135,1,0,
        0,0,134,132,1,0,0,0,135,136,5,10,0,0,136,137,1,0,0,0,137,138,6,18,
        0,0,138,38,1,0,0,0,139,141,7,2,0,0,140,139,1,0,0,0,141,142,1,0,0,
        0,142,140,1,0,0,0,142,143,1,0,0,0,143,144,1,0,0,0,144,145,6,19,0,
        0,145,40,1,0,0,0,10,0,98,103,105,111,113,121,126,132,142,1,6,0,0
    ]

class mashLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    T__9 = 10
    T__10 = 11
    T__11 = 12
    T__12 = 13
    INTEGER = 14
    IDENTIFIER = 15
    STRING = 16
    DIGIT = 17
    LETTER = 18
    COMMENT = 19
    WS = 20

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'echo'", "'$(('", "'))'", "'+'", "'-'", "'*'", "'/'", "'('", 
            "')'", "'string_var'", "'int_var'", "'bool_var'", "'='" ]

    symbolicNames = [ "<INVALID>",
            "INTEGER", "IDENTIFIER", "STRING", "DIGIT", "LETTER", "COMMENT", 
            "WS" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "T__9", "T__10", "T__11", "T__12", "INTEGER", 
                  "IDENTIFIER", "STRING", "DIGIT", "LETTER", "COMMENT", 
                  "WS" ]

    grammarFileName = "mash.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


